// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StandardCheckoutKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin
import Foundation
@_exported import StandardCheckoutKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class StandardCheckout {
  public init(viewController: UIKit.UIViewController)
  public func initPayment(requestParameters: StandardCheckoutKit.RequestParameters, standardCheckoutDelegate: any StandardCheckoutKit.StandardCheckoutDelegate, secureKey: Swift.String)
  @objc deinit
}
public struct PaymentMode {
  public static let CC: Swift.String
  public static let VA: Swift.String
  public static let EW: Swift.String
  public static let DC: Swift.String
  public static let NB: Swift.String
  public static let PV: Swift.String
  public static let ACH: Swift.String
  public static let CHK: Swift.String
  public static let SEPA: Swift.String
  public static let PC: Swift.String
  public static let PP: Swift.String
  public static let EX: Swift.String
  public static let CS: Swift.String
  public static let EWI: Swift.String
  public static let UPI: Swift.String
  public static let NBI: Swift.String
  public static let CRP: Swift.String
  public static let ROM: Swift.String
  public static let TP: Swift.String
  public static let PLMP: Swift.String
  public static let ORPG: Swift.String
  public static let CU: Swift.String
  public static let BC: Swift.String
  public static let PAGY: Swift.String
  public static let OP: Swift.String
  public static let PB: Swift.String
  public static let ZOTA: Swift.String
  public static let ECHK: Swift.String
  public static let CP: Swift.String
  public static let BT: Swift.String
  public static let TM: Swift.String
  public static let NBB: Swift.String
  public static let EWB: Swift.String
  public static let KCP: Swift.String
  public static let T: Swift.String
  public static let ZHI: Swift.String
  public static let TWP: Swift.String
  public static let MMA: Swift.String
  public static let GIFT: Swift.String
  public static let QKC: Swift.String
  public static let DOKU: Swift.String
  public static let WPAY: Swift.String
  public static let ES: Swift.String
  public static let FP: Swift.String
  public static let BTA: Swift.String
  public static let DBT: Swift.String
  public static let GCA: Swift.String
  public static let GPAY: Swift.String
  public static let MTN: Swift.String
  public static let TPAY: Swift.String
  public static let CR: Swift.String
  public static let CARD: Swift.String
  public static let BDM: Swift.String
  public static let EWA: Swift.String
  public static let SFP: Swift.String
  public static let CHS: Swift.String
  public static let IMT: Swift.String
  public static let POT: Swift.String
  public static let UPQR: Swift.String
}
extension Swift.Array {
  @inlinable internal init(reserveCapacity: Swift.Int) {
        self = Array<Element>()
        self.reserveCapacity(reserveCapacity)
    }
  @inlinable internal var slice: Swift.ArraySlice<Element> {
    get {
        self[self.startIndex ..< self.endIndex]
    }
  }
  @inlinable internal subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get {
        return indices.contains(index) ? self[index] : nil
    }
  }
}
public protocol StandardCheckoutDelegate {
  func onSuccess(standardCheckoutResult: StandardCheckoutKit.StandardCheckoutResult)
  func onFail(title: Swift.String, message: Swift.String)
}
public struct PaymentBrand {
  public static let visa: Swift.String
  public static let mc: Swift.String
  public static let diner: Swift.String
  public static let amex: Swift.String
  public static let disc: Swift.String
  public static let cup: Swift.String
  public static let myMonedero: Swift.String
  public static let paySafeCard: Swift.String
  public static let inpay: Swift.String
  public static let sofort: Swift.String
  public static let ideal: Swift.String
  public static let directDebit: Swift.String
  public static let ach: Swift.String
  public static let paysec: Swift.String
  public static let chk: Swift.String
  public static let jcb: Swift.String
  public static let sepaExpress: Swift.String
  public static let neosurf: Swift.String
  public static let giropay: Swift.String
  public static let multiBanco: Swift.String
  public static let astroPay: Swift.String
  public static let neteller: Swift.String
  public static let rupay: Swift.String
  public static let skrill: Swift.String
  public static let qiwi: Swift.String
  public static let yandex: Swift.String
  public static let perfectMoney: Swift.String
  public static let voucherMoney: Swift.String
  public static let billDesk: Swift.String
  public static let p4: Swift.String
  public static let VISA: Swift.String
  public static let MC: Swift.String
  public static let DINER: Swift.String
  public static let AMEX: Swift.String
  public static let DISC: Swift.String
  public static let CUP: Swift.String
  public static let MyMonedero: Swift.String
  public static let PAYSAFECARD: Swift.String
  public static let InPay: Swift.String
  public static let Sofort: Swift.String
  public static let Ideal: Swift.String
  public static let DIRECTDEBIT: Swift.String
  public static let ACH: Swift.String
  public static let PaySec: Swift.String
  public static let CHK: Swift.String
  public static let JCB: Swift.String
  public static let SEPAEXPRESS: Swift.String
  public static let NEOSURF: Swift.String
  public static let GIROPAY: Swift.String
  public static let MULTIBANCO: Swift.String
  public static let ASTROPAY: Swift.String
  public static let NETELLER: Swift.String
  public static let RUPAY: Swift.String
  public static let SKRILL: Swift.String
  public static let QIWI: Swift.String
  public static let YANDEX: Swift.String
  public static let PERFECTMONEY: Swift.String
  public static let VOUCHERMONEY: Swift.String
  public static let BILLDESK: Swift.String
  public static let JETON: Swift.String
  public static let JETONVOUCHER: Swift.String
  public static let EPAY: Swift.String
  public static let TRUSTLY: Swift.String
  public static let UNICREDIT: Swift.String
  public static let MAESTRO: Swift.String
  public static let INSTAPAYMENT: Swift.String
  public static let PURPLEPAY: Swift.String
  public static let AVISA: Swift.String
  public static let FLUTTER: Swift.String
  public static let AMC: Swift.String
  public static let WEBMONEY: Swift.String
  public static let SAFEXPAY: Swift.String
  public static let CLEARSETTLE: Swift.String
  public static let HDFC: Swift.String
  public static let ICICI: Swift.String
  public static let SBI: Swift.String
  public static let AXIS: Swift.String
  public static let KOTAK: Swift.String
  public static let YES_BANK: Swift.String
  public static let BDBANKS: Swift.String
  public static let PAYTM: Swift.String
  public static let FREECHARGE: Swift.String
  public static let JIOMONEY: Swift.String
  public static let MOBIKWIK: Swift.String
  public static let PAYZAPP: Swift.String
  public static let BDWALLETS: Swift.String
  public static let AllPay: Swift.String
  public static let eCheck: Swift.String
  public static let ROMCARD: Swift.String
  public static let ELEGRO: Swift.String
  public static let TOJIKA: Swift.String
  public static let QR: Swift.String
  public static let UnionPay: Swift.String
  public static let WechatPay: Swift.String
  public static let PaySend: Swift.String
  public static let BCPAYGATE: Swift.String
  public static let CupUPI: Swift.String
  public static let SecurePay: Swift.String
  public static let PAYG: Swift.String
  public static let ONLINEPAY: Swift.String
  public static let SEPBANKS: Swift.String
  public static let SEPWALLETS: Swift.String
  public static let DUSPAYDD: Swift.String
  public static let PayBoutique: Swift.String
  public static let ZOTA: Swift.String
  public static let EZPAY: Swift.String
  public static let BPBANKS: Swift.String
  public static let BPWALLETS: Swift.String
  public static let JPBANK: Swift.String
  public static let TAPMIO: Swift.String
  public static let BanglaWallets: Swift.String
  public static let BanglaBanks: Swift.String
  public static let HSBC: Swift.String
  public static let Dutch_Bangla_Bank: Swift.String
  public static let Sonali_Bank: Swift.String
  public static let IBBL: Swift.String
  public static let Grameen_Bank: Swift.String
  public static let Janata_Bank: Swift.String
  public static let KCPD: Swift.String
  public static let Triple: Swift.String
  public static let Zhixinfu: Swift.String
  public static let VPBANKS: Swift.String
  public static let TWD: Swift.String
  public static let GLOBALPAY: Swift.String
  public static let ECOCASH: Swift.String
  public static let TELECASH: Swift.String
  public static let QPBANKS: Swift.String
  public static let LZPBANKS: Swift.String
  public static let LZPWALLETS: Swift.String
  public static let Giftpay: Swift.String
  public static let QKBANK: Swift.String
  public static let DOKU: Swift.String
  public static let EPBANKS: Swift.String
  public static let ACBANKS: Swift.String
  public static let IMBANKS: Swift.String
  public static let eBanking: Swift.String
  public static let PromptpayQR: Swift.String
  public static let Ecocash_RTGS: Swift.String
  public static let Ecocash_USD: Swift.String
  public static let PayDunya: Swift.String
  public static let Ecobank: Swift.String
  public static let NMB_Zimbabwe: Swift.String
  public static let OneMoney_USD: Swift.String
  public static let OneMoney_RTGS: Swift.String
  public static let MTN_Momo: Swift.String
  public static let CBZ_Bank: Swift.String
  public static let PUBANKS: Swift.String
  public static let ECOSPEND: Swift.String
  public static let FASTPAY: Swift.String
  public static let GPAY: Swift.String
  public static let PGBANKS: Swift.String
  public static let APBANKS: Swift.String
  public static let STANDINGORDERS: Swift.String
  public static let INSTANTPAYMENT: Swift.String
  public static let PAYBYLINK: Swift.String
  public static let SCHEDULEDPAYMENT: Swift.String
  public static let ZIPIT: Swift.String
  public static let First_Bank_of_Nigeria: Swift.String
  public static let RTGS: Swift.String
  public static let SWIFT: Swift.String
  public static let REDBOXX: Swift.String
  public static let QPVBANKS: Swift.String
  public static let SendMoney_To_Account: Swift.String
  public static let TigerPay_Wallet: Swift.String
  public static let CajaRural: Swift.String
  public static let MTN: Swift.String
  public static let AIRTEL: Swift.String
  public static let TGPAY: Swift.String
  public static let PABANKS: Swift.String
  public static let CARD: Swift.String
  public static let Mobile_Banking: Swift.String
  public static let OPBANKS: Swift.String
  public static let NAGAD: Swift.String
  public static let TAP: Swift.String
  public static let UPAY: Swift.String
  public static let BankTransferAT: Swift.String
  public static let GiftCardAT: Swift.String
  public static let WalletAT: Swift.String
  public static let MobileMoneyAT: Swift.String
  public static let LYBANKS: Swift.String
  public static let DBBL_MobileBanking: Swift.String
  public static let MTN_Uganda: Swift.String
  public static let Airtel_Uganda: Swift.String
  public static let BITCLEAR: Swift.String
  public static let Transfr: Swift.String
  public static let FLEXEPIN_VOUCHER: Swift.String
  public static let UPIQR: Swift.String
  public static let TED: Swift.String
  public static let PICPAY: Swift.String
  public static let BOLETOS: Swift.String
  public static let PIX: Swift.String
  public static let Internet_Banking: Swift.String
  public static let Bank_Transfer: Swift.String
  public static let Momo_wallet: Swift.String
  public static let Zalo_Pay: Swift.String
  public static let VIETTEL_PAY: Swift.String
  public static let TRUEWALLET: Swift.String
  public static let AME: Swift.String
  public static let Paypal: Swift.String
  public static let Todito: Swift.String
  public static let TPaga: Swift.String
  public static let Mach: Swift.String
  public static let Vita: Swift.String
  public static let DepositExpress: Swift.String
  public static let SPEI: Swift.String
  public static let CoDi: Swift.String
  public static let PSE: Swift.String
  public static let Khipu: Swift.String
  public static let Pagpeffectivo: Swift.String
  public static let Efecty: Swift.String
  public static let SuRed: Swift.String
  public static let Gana: Swift.String
  public static let VirtualAccount: Swift.String
  public static let OVOWALLET: Swift.String
  public static let GOPAY: Swift.String
  public static let BankTransferPG: Swift.String
  public static let Rapipago: Swift.String
  public static let PagoFacil: Swift.String
  public static let Baloto: Swift.String
  public static let Lottery: Swift.String
  public static let CashPG: Swift.String
  public static let OXXO: Swift.String
  public static let OXXOPay: Swift.String
  public static let Pago: Swift.String
  public static let EFT: Swift.String
  public static let MPESA: Swift.String
  public static let VFD: Swift.String
  public static let ISPBANKS: Swift.String
  public static let ISPWALLETS: Swift.String
  public static let TNG: Swift.String
  public static let DQR: Swift.String
  public static let QRIS: Swift.String
  public static let NGNBANK: Swift.String
  public static let OFAPAY: Swift.String
  public static let IMT: Swift.String
  public static let PAPARA: Swift.String
  public static let PAYFIX: Swift.String
  public static let SAFCARD: Swift.String
  public static let SAFBANK: Swift.String
  public static let NBBANK: Swift.String
  public static let PARAZULA: Swift.String
  public static let MEFETE: Swift.String
  public static let ICICIBANK: Swift.String
  public static let NTTBANK: Swift.String
  public static let NTTWALLETS: Swift.String
  public static let STATICQR: Swift.String
  public static let UPI: Swift.String
}
@usableFromInline
internal struct BatchedCollectionIndex<Base> where Base : Swift.Collection {
}
extension StandardCheckoutKit.BatchedCollectionIndex : Swift.Comparable {
  @usableFromInline
  internal static func == <BaseCollection>(lhs: StandardCheckoutKit.BatchedCollectionIndex<BaseCollection>, rhs: StandardCheckoutKit.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
  @usableFromInline
  internal static func < <BaseCollection>(lhs: StandardCheckoutKit.BatchedCollectionIndex<BaseCollection>, rhs: StandardCheckoutKit.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
}
@usableFromInline
internal struct BatchedCollection<Base> : Swift.Collection where Base : Swift.Collection {
  @usableFromInline
  internal init(base: Base, size: Swift.Int)
  @usableFromInline
  internal typealias Index = StandardCheckoutKit.BatchedCollectionIndex<Base>
  @usableFromInline
  internal var startIndex: StandardCheckoutKit.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal var endIndex: StandardCheckoutKit.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal func index(after idx: StandardCheckoutKit.BatchedCollection<Base>.Index) -> StandardCheckoutKit.BatchedCollection<Base>.Index
  @usableFromInline
  internal subscript(idx: StandardCheckoutKit.BatchedCollection<Base>.Index) -> Base.SubSequence {
    get
  }
  @usableFromInline
  internal typealias Element = Base.SubSequence
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<StandardCheckoutKit.BatchedCollection<Base>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<StandardCheckoutKit.BatchedCollection<Base>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<StandardCheckoutKit.BatchedCollection<Base>>
}
extension Swift.Collection {
  @inlinable internal func batched(by size: Swift.Int) -> StandardCheckoutKit.BatchedCollection<Self> {
    BatchedCollection(base: self, size: size)
  }
}
@_specialize(exported: false, kind: full, where T == Swift.Int)
@_specialize(exported: false, kind: full, where T == Swift.UInt)
@_specialize(exported: false, kind: full, where T == Swift.UInt8)
@_specialize(exported: false, kind: full, where T == Swift.UInt16)
@_specialize(exported: false, kind: full, where T == Swift.UInt32)
@_specialize(exported: false, kind: full, where T == Swift.UInt64)
@inlinable internal func arrayOfBytes<T>(value: T, length totalBytes: Swift.Int = MemoryLayout<T>.size) -> Swift.Array<Swift.UInt8> where T : Swift.FixedWidthInteger {
  let valuePointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  valuePointer.pointee = value

  let bytesPointer = UnsafeMutablePointer<UInt8>(OpaquePointer(valuePointer))
  var bytes = Array<UInt8>(repeating: 0, count: totalBytes)
  for j in 0..<min(MemoryLayout<T>.size, totalBytes) {
    bytes[totalBytes - 1 - j] = (bytesPointer + j).pointee
  }

  valuePointer.deinitialize(count: 1)
  valuePointer.deallocate()

  return bytes
}
extension Swift.FixedWidthInteger {
  @inlinable internal func bytes(totalBytes: Swift.Int = MemoryLayout<Self>.size) -> Swift.Array<Swift.UInt8> {
    arrayOfBytes(value: self.littleEndian, length: totalBytes)
    // TODO: adjust bytes order
    // var value = self.littleEndian
    // return withUnsafeBytes(of: &value, Array.init).reversed()
  }
}
@_hasMissingDesignatedInitializers public class StandardCheckoutResult {
  public var json: [Swift.String : Any]
  @objc deinit
}
public class RequestParameters {
  public init()
  public var memberId: Swift.String
  public var checksum: Swift.String
  public var terminalId: Swift.String
  public var merchantTransactionId: Swift.String
  public var amount: Swift.String
  public var currency: Swift.String
  public var paymentBrand: Swift.String
  public var paymentMode: Swift.String
  public var toType: Swift.String
  public var version: Swift.String
  public var email: Swift.String
  public var phone: Swift.String
  public var birthDate: Swift.String
  public var givenName: Swift.String
  public var surName: Swift.String
  public var postCode: Swift.String
  public var street: Swift.String
  public var city: Swift.String
  public var state: Swift.String
  public var country: Swift.String
  public var orderDescription: Swift.String
  public var telnocc: Swift.String
  public var hostUrl: Swift.String
  public var device: Swift.String
  @objc deinit
}
@inlinable internal func rotateLeft(_ value: Swift.UInt8, by: Swift.UInt8) -> Swift.UInt8 {
  ((value << by) & 0xff) | (value >> (8 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  ((value << by) & 0xffff) | (value >> (16 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  ((value << by) & 0xffffffff) | (value >> (32 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  (value << by) | (value >> (64 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  (value >> by) | (value << (16 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  (value >> by) | (value << (32 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  ((value >> by) | (value << (64 - by)))
}
@inlinable internal func reversed(_ uint8: Swift.UInt8) -> Swift.UInt8 {
  var v = uint8
  v = (v & 0xf0) >> 4 | (v & 0x0f) << 4
  v = (v & 0xcc) >> 2 | (v & 0x33) << 2
  v = (v & 0xaa) >> 1 | (v & 0x55) << 1
  return v
}
@inlinable internal func reversed(_ uint32: Swift.UInt32) -> Swift.UInt32 {
  var v = uint32
  v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1)
  v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2)
  v = ((v >> 4) & 0x0f0f0f0f) | ((v & 0x0f0f0f0f) << 4)
  v = ((v >> 8) & 0x00ff00ff) | ((v & 0x00ff00ff) << 8)
  v = ((v >> 16) & 0xffff) | ((v & 0xffff) << 16)
  return v
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.ArraySlice<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  return xor(left, right).slice
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.Array<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  let length = Swift.min(left.count, right.count)

  let buf = UnsafeMutablePointer<UInt8>.allocate(capacity: length)
  buf.initialize(repeating: 0, count: length)
  defer {
    buf.deinitialize(count: length)
    buf.deallocate()
  }

  // xor
  for i in 0..<length {
    buf[i] = left[left.startIndex.advanced(by: i)] ^ right[right.startIndex.advanced(by: i)]
  }

  return Array(UnsafeBufferPointer(start: buf, count: length))
}
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
  // Step 1. Append Padding Bits
  // append one bit (UInt8 with one bit) to message
  data.append(0x80)

  // Step 2. append "0" bit until message length in bits ≡ 448 (mod 512)
  let max = blockSize - allowance // 448, 986
  if msgLength % blockSize < max { // 448
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
